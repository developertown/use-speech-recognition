{"version":3,"file":"use-speech-recognition.cjs.development.js","sources":["../src/types/index.ts","../src/actions.ts","../src/reducer.ts","../src/constants.ts","../src/index.tsx"],"sourcesContent":["declare global {\n  interface Window {\n    webkitSpeechRecognition: unknown;\n    mozSpeechRecognition: unknown;\n    msSpeechRecognition: unknown;\n    oSpeechRecognition: unknown;\n  }\n}\n\nexport interface SpeechRecognitionUtils extends SpeechRecognitionState {\n  resetTranscript: () => void;\n  startListening: () => void;\n  stopListening: () => void;\n}\n\nexport interface SpeechRecognitionState {\n  status: SpeechRecognitionStatus;\n  transcript: string; // Transcription of all speech that has been spoken into the microphone. Is equivalent to the final transcript followed by the interim transcript, separated by a space.\n  interimTranscript: string; // Current word guesses before adding to transcript\n  finalTranscript: string; // Completed transcript\n}\n\nexport interface SpeechRecognitionInternalState extends SpeechRecognitionState {\n  pauseAfterDisconnect: boolean;\n}\n\nexport enum SpeechRecognitionStatus {\n  READY = \"ready\",\n  STOPPED = \"stopped\",\n  STARTED = \"started\",\n  ERROR = \"error\",\n  RESET = \"reset\",\n}\n\nexport interface SpeechRecognitionOptions {\n  autoStart: boolean;\n  continuous: boolean;\n  interimResults: boolean;\n  onResult: (final: string, interim: string) => void;\n  onDisconnect: () => void;\n  onStart: () => void;\n}\n\nexport enum SpeechRecognitionDisconnectType {\n  RESET = \"RESET\",\n  STOP = \"STOP\",\n}\n\nexport type Transcript = string;\n","import { actionCreatorFactory } from \"typescript-fsa\";\nimport { Transcript, SpeechRecognitionStatus } from \"./types\";\n\nconst createAction = actionCreatorFactory(\"SPEECH_RECOGNITION\");\n\nexport const setTranscript = createAction<Transcript>(\"SET_TRANSCRIPT\");\nexport const setStatus = createAction<SpeechRecognitionStatus>(\"SET_STATUS\");\nexport const setFinalTranscript = createAction<Transcript>(\"SET_FINAL_TRANSCRIPT\");\nexport const setInterimTranscript = createAction<Transcript>(\"SET_INTERIM_TRANSCRIPT\");\nexport const setPauseAfterDisconnect = createAction<boolean>(\"SET_PAUSE_AFTER_DISCONNECT\");\n","import { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { SpeechRecognitionInternalState, SpeechRecognitionStatus } from \"./types\";\nimport { setInterimTranscript, setTranscript, setFinalTranscript, setStatus, setPauseAfterDisconnect } from \"./actions\";\n\nexport const initialState: SpeechRecognitionInternalState = {\n  status: SpeechRecognitionStatus.READY,\n  transcript: \"\",\n  interimTranscript: \"\",\n  finalTranscript: \"\",\n  pauseAfterDisconnect: false,\n};\n\nexport const speechRecognitionReducer = reducerWithInitialState(initialState)\n  .case(setTranscript, (state, transcript) => ({\n    ...state,\n    transcript,\n  }))\n  .case(setPauseAfterDisconnect, (state, pauseAfterDisconnect) => ({\n    ...state,\n    pauseAfterDisconnect,\n  }))\n  .case(setInterimTranscript, (state, interimTranscript) => ({\n    ...state,\n    interimTranscript,\n  }))\n  .case(setFinalTranscript, (state, finalTranscript) => ({\n    ...state,\n    finalTranscript,\n  }))\n  .case(setStatus, (state, status) => ({\n    ...state,\n    status,\n  }));\n\nexport default speechRecognitionReducer;\n","export const ERROR_NO_RECOGNITION_SUPPORT = \"Speech recognition is not supported on this device\";\n","import { speechRecognitionReducer, initialState } from \"./reducer\";\nimport { useEffect, useCallback, useReducer, useMemo } from \"react\";\nimport {\n  SpeechRecognitionOptions,\n  SpeechRecognitionUtils,\n  SpeechRecognitionDisconnectType,\n  SpeechRecognitionStatus,\n} from \"./types\";\n\nimport { setPauseAfterDisconnect, setInterimTranscript, setFinalTranscript, setTranscript, setStatus } from \"./actions\";\nimport { ERROR_NO_RECOGNITION_SUPPORT } from \"./constants\";\n\nexport const defaultOptions: SpeechRecognitionOptions = {\n  autoStart: false,\n  continuous: false,\n  interimResults: true,\n  onResult: () => {},\n  onDisconnect: () => {},\n  onStart: () => {},\n};\n\nfunction concatTranscripts(...parts: string[]) {\n  return parts\n    .map((t) => t.trim())\n    .join(\" \")\n    .trim();\n}\n\nexport function useSpeechRecognition(options: SpeechRecognitionOptions = defaultOptions): SpeechRecognitionUtils {\n  const [{ status, pauseAfterDisconnect, interimTranscript, finalTranscript, transcript }, dispatch] = useReducer(\n    speechRecognitionReducer,\n    initialState,\n  );\n\n  const recognition = useMemo(() => {\n    const BrowserSpeechRecognition =\n      typeof window !== \"undefined\" &&\n      (window.SpeechRecognition ||\n        window.webkitSpeechRecognition ||\n        window.mozSpeechRecognition ||\n        window.msSpeechRecognition ||\n        window.oSpeechRecognition);\n\n    if (BrowserSpeechRecognition) {\n      return new BrowserSpeechRecognition();\n    } else {\n      throw new Error(ERROR_NO_RECOGNITION_SUPPORT);\n    }\n  }, []);\n\n  const disconnect = useCallback(\n    (disconnectType: SpeechRecognitionDisconnectType) => {\n      if (recognition) {\n        switch (disconnectType) {\n          case SpeechRecognitionDisconnectType.RESET:\n            dispatch(setStatus(SpeechRecognitionStatus.RESET));\n            dispatch(setPauseAfterDisconnect(false));\n            recognition.abort();\n            break;\n          case SpeechRecognitionDisconnectType.STOP:\n          default:\n            dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n            dispatch(setPauseAfterDisconnect(true));\n            recognition.stop();\n        }\n      }\n    },\n    [recognition],\n  );\n\n  const resetTranscript = useCallback(() => {\n    disconnect(SpeechRecognitionDisconnectType.RESET);\n    dispatch(setTranscript(\"\"));\n    dispatch(setInterimTranscript(\"\"));\n    dispatch(setFinalTranscript(\"\"));\n  }, [disconnect]);\n\n  const startListening = useCallback(() => {\n    console.log(\"Running start listening\");\n    if (recognition && status !== SpeechRecognitionStatus.STARTED) {\n      if (!recognition.continuous) {\n        resetTranscript();\n      }\n\n      try {\n        recognition.start();\n        dispatch(setStatus(SpeechRecognitionStatus.STARTED));\n      } catch (DOMException) {\n        // Tried to start recognition after it has already started - safe to swallow this error\n      }\n    }\n  }, [status, recognition, resetTranscript]);\n\n  const stopListening = useCallback(() => {\n    console.log(\"Running stop listening\");\n    disconnect(SpeechRecognitionDisconnectType.STOP);\n    dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n  }, [disconnect]);\n\n  const updateTranscript = useCallback(\n    (event: SpeechRecognitionEvent) => {\n      console.log(\"updating transcript\", event);\n      let interim = \"\";\n      let final = \"\";\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          final = concatTranscripts(final, event.results[i][0].transcript);\n        } else {\n          interim = concatTranscripts(interim, event.results[i][0].transcript);\n        }\n      }\n      dispatch(setTranscript(concatTranscripts(final, interim)));\n      dispatch(setInterimTranscript(interim));\n      dispatch(setFinalTranscript(final));\n\n      if (options.onResult) {\n        options.onResult(final, interim);\n      }\n    },\n    [options],\n  );\n\n  const onRecognitionDisconnect = useCallback(() => {\n    dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n    if (pauseAfterDisconnect) {\n      dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n    } else if (recognition) {\n      if (recognition.continuous) {\n        startListening();\n      } else {\n        dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n      }\n    }\n    dispatch(setPauseAfterDisconnect(false));\n  }, [pauseAfterDisconnect, recognition, startListening]);\n\n  const onRecognitionError = useCallback(({ error, message }) => {\n    console.log(\"Speech recognition error detected: \" + error);\n    console.log(\"Additional information: \" + message);\n  }, []);\n\n  useEffect(() => {\n    if (recognition) {\n      recognition.continuous = options.continuous !== false;\n      recognition.interimResults = options.interimResults;\n      recognition.onresult = updateTranscript;\n      recognition.onend = onRecognitionDisconnect;\n      recognition.onerror = onRecognitionError;\n    }\n  }, [\n    onRecognitionDisconnect,\n    onRecognitionError,\n    updateTranscript,\n    recognition,\n    options.continuous,\n    options.interimResults,\n  ]);\n\n  useEffect(() => {\n    if (recognition && options && options.autoStart) {\n      startListening();\n    }\n\n    return () => {\n      if (options && options.autoStart && status === SpeechRecognitionStatus.STARTED) {\n        stopListening();\n      }\n    };\n  }, [options, recognition, startListening, status, stopListening]);\n\n  return {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    status,\n    resetTranscript,\n    startListening,\n    stopListening,\n  };\n}\n"],"names":["SpeechRecognitionStatus","SpeechRecognitionDisconnectType","createAction","actionCreatorFactory","setTranscript","setStatus","setFinalTranscript","setInterimTranscript","setPauseAfterDisconnect","initialState","status","READY","transcript","interimTranscript","finalTranscript","pauseAfterDisconnect","speechRecognitionReducer","reducerWithInitialState","state","ERROR_NO_RECOGNITION_SUPPORT","defaultOptions","autoStart","continuous","interimResults","onResult","onDisconnect","onStart","concatTranscripts","parts","map","t","trim","join","useSpeechRecognition","options","useReducer","dispatch","recognition","useMemo","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","Error","disconnect","useCallback","disconnectType","RESET","abort","STOP","STOPPED","stop","resetTranscript","startListening","console","log","STARTED","start","DOMException","stopListening","updateTranscript","event","interim","final","i","resultIndex","results","length","isFinal","onRecognitionDisconnect","onRecognitionError","error","message","useEffect","onresult","onend","onerror"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAYA,uBAAZ;;AAAA,WAAYA;AACVA,EAAAA,gCAAA,UAAA;AACAA,EAAAA,kCAAA,YAAA;AACAA,EAAAA,kCAAA,YAAA;AACAA,EAAAA,gCAAA,UAAA;AACAA,EAAAA,gCAAA,UAAA;AACD,CAND,EAAYA,uBAAuB,KAAvBA,uBAAuB,KAAA,CAAnC;;AAiBA,IAAYC,+BAAZ;;AAAA,WAAYA;AACVA,EAAAA,wCAAA,UAAA;AACAA,EAAAA,uCAAA,SAAA;AACD,CAHD,EAAYA,+BAA+B,KAA/BA,+BAA+B,KAAA,CAA3C;;ACxCA,IAAMC,YAAY,gBAAGC,kCAAoB,CAAC,oBAAD,CAAzC;AAEA,AAAO,IAAMC,aAAa,gBAAGF,YAAY,CAAa,gBAAb,CAAlC;AACP,AAAO,IAAMG,SAAS,gBAAGH,YAAY,CAA0B,YAA1B,CAA9B;AACP,AAAO,IAAMI,kBAAkB,gBAAGJ,YAAY,CAAa,sBAAb,CAAvC;AACP,AAAO,IAAMK,oBAAoB,gBAAGL,YAAY,CAAa,wBAAb,CAAzC;AACP,AAAO,IAAMM,uBAAuB,gBAAGN,YAAY,CAAU,4BAAV,CAA5C;;ACLA,IAAMO,YAAY,GAAmC;AAC1DC,EAAAA,MAAM,EAAEV,uBAAuB,CAACW,KAD0B;AAE1DC,EAAAA,UAAU,EAAE,EAF8C;AAG1DC,EAAAA,iBAAiB,EAAE,EAHuC;AAI1DC,EAAAA,eAAe,EAAE,EAJyC;AAK1DC,EAAAA,oBAAoB,EAAE;AALoC,CAArD;AAQP,AAAO,IAAMC,wBAAwB,gBAAGC,6CAAuB,CAACR,YAAD,CAAvB,SAChCL,aADgC,EACjB,UAACc,KAAD,EAAQN,UAAR;AAAA,+BAChBM,KADgB;AAEnBN,IAAAA,UAAU,EAAVA;AAFmB;AAAA,CADiB,UAKhCJ,uBALgC,EAKP,UAACU,KAAD,EAAQH,oBAAR;AAAA,+BAC1BG,KAD0B;AAE7BH,IAAAA,oBAAoB,EAApBA;AAF6B;AAAA,CALO,UAShCR,oBATgC,EASV,UAACW,KAAD,EAAQL,iBAAR;AAAA,+BACvBK,KADuB;AAE1BL,IAAAA,iBAAiB,EAAjBA;AAF0B;AAAA,CATU,UAahCP,kBAbgC,EAaZ,UAACY,KAAD,EAAQJ,eAAR;AAAA,+BACrBI,KADqB;AAExBJ,IAAAA,eAAe,EAAfA;AAFwB;AAAA,CAbY,UAiBhCT,SAjBgC,EAiBrB,UAACa,KAAD,EAAQR,MAAR;AAAA,+BACZQ,KADY;AAEfR,IAAAA,MAAM,EAANA;AAFe;AAAA,CAjBqB,CAAjC;;ACZA,IAAMS,4BAA4B,GAAG,oDAArC;;ICYMC,cAAc,GAA6B;AACtDC,EAAAA,SAAS,EAAE,KAD2C;AAEtDC,EAAAA,UAAU,EAAE,KAF0C;AAGtDC,EAAAA,cAAc,EAAE,IAHsC;AAItDC,EAAAA,QAAQ,EAAE,sBAJ4C;AAKtDC,EAAAA,YAAY,EAAE,0BALwC;AAMtDC,EAAAA,OAAO,EAAE;AAN6C,CAAjD;;AASP,SAASC,iBAAT;oCAA8BC;AAAAA,IAAAA;;;AAC5B,SAAOA,KAAK,CACTC,GADI,CACA,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,IAAF,EAAP;AAAA,GADA,EAEJC,IAFI,CAEC,GAFD,EAGJD,IAHI,EAAP;AAID;;AAED,SAAgBE,qBAAqBC;MAAAA;AAAAA,IAAAA,UAAoCd;;;oBAC8Be,gBAAU,CAC7GnB,wBAD6G,EAE7GP,YAF6G;;MAAtGC,sBAAAA;MAAQK,oCAAAA;MAAsBF,iCAAAA;MAAmBC,+BAAAA;MAAiBF,0BAAAA;MAAcwB;;AAKzF,MAAMC,WAAW,GAAGC,aAAO,CAAC;AAC1B,QAAMC,wBAAwB,GAC5B,OAAOC,MAAP,KAAkB,WAAlB,KACCA,MAAM,CAACC,iBAAP,IACCD,MAAM,CAACE,uBADR,IAECF,MAAM,CAACG,oBAFR,IAGCH,MAAM,CAACI,mBAHR,IAICJ,MAAM,CAACK,kBALT,CADF;;AAQA,QAAIN,wBAAJ,EAA8B;AAC5B,aAAO,IAAIA,wBAAJ,EAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIO,KAAJ,CAAU3B,4BAAV,CAAN;AACD;AACF,GAd0B,EAcxB,EAdwB,CAA3B;AAgBA,MAAM4B,UAAU,GAAGC,iBAAW,CAC5B,UAACC,cAAD;AACE,QAAIZ,WAAJ,EAAiB;AACf,cAAQY,cAAR;AACE,aAAKhD,+BAA+B,CAACiD,KAArC;AACEd,UAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACkD,KAAzB,CAAV,CAAR;AACAd,UAAAA,QAAQ,CAAC5B,uBAAuB,CAAC,KAAD,CAAxB,CAAR;AACA6B,UAAAA,WAAW,CAACc,KAAZ;AACA;;AACF,aAAKlD,+BAA+B,CAACmD,IAArC;AACA;AACEhB,UAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACqD,OAAzB,CAAV,CAAR;AACAjB,UAAAA,QAAQ,CAAC5B,uBAAuB,CAAC,IAAD,CAAxB,CAAR;AACA6B,UAAAA,WAAW,CAACiB,IAAZ;AAVJ;AAYD;AACF,GAhB2B,EAiB5B,CAACjB,WAAD,CAjB4B,CAA9B;AAoBA,MAAMkB,eAAe,GAAGP,iBAAW,CAAC;AAClCD,IAAAA,UAAU,CAAC9C,+BAA+B,CAACiD,KAAjC,CAAV;AACAd,IAAAA,QAAQ,CAAChC,aAAa,CAAC,EAAD,CAAd,CAAR;AACAgC,IAAAA,QAAQ,CAAC7B,oBAAoB,CAAC,EAAD,CAArB,CAAR;AACA6B,IAAAA,QAAQ,CAAC9B,kBAAkB,CAAC,EAAD,CAAnB,CAAR;AACD,GALkC,EAKhC,CAACyC,UAAD,CALgC,CAAnC;AAOA,MAAMS,cAAc,GAAGR,iBAAW,CAAC;AACjCS,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AACA,QAAIrB,WAAW,IAAI3B,MAAM,KAAKV,uBAAuB,CAAC2D,OAAtD,EAA+D;AAC7D,UAAI,CAACtB,WAAW,CAACf,UAAjB,EAA6B;AAC3BiC,QAAAA,eAAe;AAChB;;AAED,UAAI;AACFlB,QAAAA,WAAW,CAACuB,KAAZ;AACAxB,QAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAAC2D,OAAzB,CAAV,CAAR;AACD,OAHD,CAGE,OAAOE,YAAP,EAAqB;AAEtB;AACF;AACF,GAdiC,EAc/B,CAACnD,MAAD,EAAS2B,WAAT,EAAsBkB,eAAtB,CAd+B,CAAlC;AAgBA,MAAMO,aAAa,GAAGd,iBAAW,CAAC;AAChCS,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAX,IAAAA,UAAU,CAAC9C,+BAA+B,CAACmD,IAAjC,CAAV;AACAhB,IAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACqD,OAAzB,CAAV,CAAR;AACD,GAJgC,EAI9B,CAACN,UAAD,CAJ8B,CAAjC;AAMA,MAAMgB,gBAAgB,GAAGf,iBAAW,CAClC,UAACgB,KAAD;AACEP,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCM,KAAnC;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,MAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAGH,KAAK,CAACI,WAAnB,EAAgCD,CAAC,GAAGH,KAAK,CAACK,OAAN,CAAcC,MAAlD,EAA0D,EAAEH,CAA5D,EAA+D;AAC7D,UAAIH,KAAK,CAACK,OAAN,CAAcF,CAAd,EAAiBI,OAArB,EAA8B;AAC5BL,QAAAA,MAAK,GAAGvC,iBAAiB,CAACuC,MAAD,EAAQF,KAAK,CAACK,OAAN,CAAcF,CAAd,EAAiB,CAAjB,EAAoBvD,UAA5B,CAAzB;AACD,OAFD,MAEO;AACLqD,QAAAA,OAAO,GAAGtC,iBAAiB,CAACsC,OAAD,EAAUD,KAAK,CAACK,OAAN,CAAcF,CAAd,EAAiB,CAAjB,EAAoBvD,UAA9B,CAA3B;AACD;AACF;;AACDwB,IAAAA,QAAQ,CAAChC,aAAa,CAACuB,iBAAiB,CAACuC,MAAD,EAAQD,OAAR,CAAlB,CAAd,CAAR;AACA7B,IAAAA,QAAQ,CAAC7B,oBAAoB,CAAC0D,OAAD,CAArB,CAAR;AACA7B,IAAAA,QAAQ,CAAC9B,kBAAkB,CAAC4D,MAAD,CAAnB,CAAR;;AAEA,QAAIhC,OAAO,CAACV,QAAZ,EAAsB;AACpBU,MAAAA,OAAO,CAACV,QAAR,CAAiB0C,MAAjB,EAAwBD,OAAxB;AACD;AACF,GAnBiC,EAoBlC,CAAC/B,OAAD,CApBkC,CAApC;AAuBA,MAAMsC,uBAAuB,GAAGxB,iBAAW,CAAC;AAC1CZ,IAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACqD,OAAzB,CAAV,CAAR;;AACA,QAAItC,oBAAJ,EAA0B;AACxBqB,MAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACqD,OAAzB,CAAV,CAAR;AACD,KAFD,MAEO,IAAIhB,WAAJ,EAAiB;AACtB,UAAIA,WAAW,CAACf,UAAhB,EAA4B;AAC1BkC,QAAAA,cAAc;AACf,OAFD,MAEO;AACLpB,QAAAA,QAAQ,CAAC/B,SAAS,CAACL,uBAAuB,CAACqD,OAAzB,CAAV,CAAR;AACD;AACF;;AACDjB,IAAAA,QAAQ,CAAC5B,uBAAuB,CAAC,KAAD,CAAxB,CAAR;AACD,GAZ0C,EAYxC,CAACO,oBAAD,EAAuBsB,WAAvB,EAAoCmB,cAApC,CAZwC,CAA3C;AAcA,MAAMiB,kBAAkB,GAAGzB,iBAAW,CAAC;QAAG0B,aAAAA;QAAOC,eAAAA;AAC/ClB,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCgB,KAApD;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BiB,OAAzC;AACD,GAHqC,EAGnC,EAHmC,CAAtC;AAKAC,EAAAA,eAAS,CAAC;AACR,QAAIvC,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACf,UAAZ,GAAyBY,OAAO,CAACZ,UAAR,KAAuB,KAAhD;AACAe,MAAAA,WAAW,CAACd,cAAZ,GAA6BW,OAAO,CAACX,cAArC;AACAc,MAAAA,WAAW,CAACwC,QAAZ,GAAuBd,gBAAvB;AACA1B,MAAAA,WAAW,CAACyC,KAAZ,GAAoBN,uBAApB;AACAnC,MAAAA,WAAW,CAAC0C,OAAZ,GAAsBN,kBAAtB;AACD;AACF,GARQ,EAQN,CACDD,uBADC,EAEDC,kBAFC,EAGDV,gBAHC,EAID1B,WAJC,EAKDH,OAAO,CAACZ,UALP,EAMDY,OAAO,CAACX,cANP,CARM,CAAT;AAiBAqD,EAAAA,eAAS,CAAC;AACR,QAAIvC,WAAW,IAAIH,OAAf,IAA0BA,OAAO,CAACb,SAAtC,EAAiD;AAC/CmC,MAAAA,cAAc;AACf;;AAED,WAAO;AACL,UAAItB,OAAO,IAAIA,OAAO,CAACb,SAAnB,IAAgCX,MAAM,KAAKV,uBAAuB,CAAC2D,OAAvE,EAAgF;AAC9EG,QAAAA,aAAa;AACd;AACF,KAJD;AAKD,GAVQ,EAUN,CAAC5B,OAAD,EAAUG,WAAV,EAAuBmB,cAAvB,EAAuC9C,MAAvC,EAA+CoD,aAA/C,CAVM,CAAT;AAYA,SAAO;AACLlD,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,iBAAiB,EAAjBA,iBAFK;AAGLC,IAAAA,eAAe,EAAfA,eAHK;AAILJ,IAAAA,MAAM,EAANA,MAJK;AAKL6C,IAAAA,eAAe,EAAfA,eALK;AAMLC,IAAAA,cAAc,EAAdA,cANK;AAOLM,IAAAA,aAAa,EAAbA;AAPK,GAAP;AASD;;;;;"}