{"version":3,"file":"use-speech-recognition.cjs.development.js","sources":["../src/types/index.ts","../src/actions.ts","../src/reducer.ts","../src/index.tsx"],"sourcesContent":["export interface SpeechRecognitionUtils {\n  transcript: string; // Transcription of all speech that has been spoken into the microphone. Is equivalent to the final transcript followed by the interim transcript, separated by a space.\n  interimTranscript: string; // Current word guesses before adding to transcript\n  finalTranscript: string; // Completed transcript\n  listening: boolean; // API is currently listening via microphone\n  status: SpeechRecognitionStatus;\n  recognition?: SpeechRecognition;\n  resetTranscript: () => void;\n  startListening: () => void;\n  stopListening: () => void;\n  abortListening: () => void;\n}\n\nexport interface SpeechRecognitionState {\n  status: SpeechRecognitionStatus;\n  transcript: string; // Transcription of all speech that has been spoken into the microphone. Is equivalent to the final transcript followed by the interim transcript, separated by a space.\n  interimTranscript: string; // Current word guesses before adding to transcript\n  finalTranscript: string; // Completed transcript\n  listening: boolean; // API is currently listening via microphone\n  pauseAfterDisconnect: boolean;\n  // recognition?: SpeechRecognition;\n}\n\nexport enum SpeechRecognitionStatus {\n  READY = \"ready\",\n  STOPPED = \"stopped\",\n  STARTED = \"started\",\n  ERROR = \"error\",\n  RESET = \"reset\",\n  ABORTED = \"aborted\",\n}\n\nexport interface SpeechRecognitionOptions {\n  autoStart: boolean;\n  continuous: boolean;\n  interimResults: boolean;\n  onResult: (final: string, interim: string) => void;\n  onDisconnect: () => void;\n  onStart: () => void;\n}\n\nexport enum SpeechRecognitionDisconnectType {\n  ABORT = \"ABORT\",\n  RESET = \"RESET\",\n  STOP = \"STOP\",\n}\n\nexport type Transcript = string;\n","import { actionCreatorFactory } from \"typescript-fsa\";\nimport { Transcript, SpeechRecognitionStatus } from \"./types\";\n\nconst createAction = actionCreatorFactory(\"SPEECH_RECOGNITION\");\n\nexport const setTranscript = createAction<Transcript>(\"SET_TRANSCRIPT\");\nexport const setStatus = createAction<SpeechRecognitionStatus>(\"SET_STATUS\");\nexport const setFinalTranscript = createAction<Transcript>(\"SET_FINAL_TRANSCRIPT\");\nexport const setInterimTranscript = createAction<Transcript>(\"SET_INTERIM_TRANSCRIPT\");\nexport const setListening = createAction<boolean>(\"SET_LISTENING\");\nexport const setPauseAfterDisconnect = createAction<boolean>(\"SET_PAUSE_AFTER_DISCONNECT\");\n","import { reducerWithInitialState } from \"typescript-fsa-reducers\";\nimport { SpeechRecognitionState, SpeechRecognitionStatus } from \"./types\";\nimport {\n  setInterimTranscript,\n  setTranscript,\n  setFinalTranscript,\n  setListening,\n  setStatus,\n  setPauseAfterDisconnect,\n} from \"./actions\";\n\nexport const initialState: SpeechRecognitionState = {\n  status: SpeechRecognitionStatus.READY,\n  transcript: \"\",\n  interimTranscript: \"\",\n  finalTranscript: \"\",\n  listening: false,\n  pauseAfterDisconnect: false,\n};\n\nexport const speechRecognitionReducer = reducerWithInitialState(initialState)\n  .case(setTranscript, (state, transcript) => ({\n    ...state,\n    transcript,\n  }))\n  .case(setPauseAfterDisconnect, (state, pauseAfterDisconnect) => ({\n    ...state,\n    pauseAfterDisconnect,\n  }))\n  .case(setInterimTranscript, (state, interimTranscript) => ({\n    ...state,\n    interimTranscript,\n  }))\n  .case(setFinalTranscript, (state, finalTranscript) => ({\n    ...state,\n    finalTranscript,\n  }))\n  .case(setStatus, (state, status) => ({\n    ...state,\n    status,\n  }))\n  .case(setListening, (state, listening) => ({\n    ...state,\n    listening,\n  }));\n\nexport default speechRecognitionReducer;\n","import { speechRecognitionReducer, initialState } from \"./reducer\";\nimport { useEffect, useCallback, useReducer } from \"react\";\nimport {\n  SpeechRecognitionOptions,\n  SpeechRecognitionUtils,\n  SpeechRecognitionDisconnectType,\n  SpeechRecognitionStatus,\n} from \"./types\";\n\nimport {\n  setListening,\n  setPauseAfterDisconnect,\n  setInterimTranscript,\n  setFinalTranscript,\n  setTranscript,\n  setStatus,\n} from \"./actions\";\n\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: unknown;\n    mozSpeechRecognition: unknown;\n    msSpeechRecognition: unknown;\n    oSpeechRecognition: unknown;\n  }\n}\n\nexport const defaultOptions: SpeechRecognitionOptions = {\n  autoStart: false,\n  continuous: false,\n  interimResults: true,\n  onResult: () => {},\n  onDisconnect: () => {},\n  onStart: () => {},\n};\n\nfunction concatTranscripts(...parts: string[]) {\n  return parts\n    .map((t) => t.trim())\n    .join(\" \")\n    .trim();\n}\n\nexport function useSpeechRecognition(options: SpeechRecognitionOptions = defaultOptions): SpeechRecognitionUtils {\n  const BrowserSpeechRecognition =\n    typeof window !== \"undefined\" &&\n    (window.SpeechRecognition ||\n      window.webkitSpeechRecognition ||\n      window.mozSpeechRecognition ||\n      window.msSpeechRecognition ||\n      window.oSpeechRecognition);\n\n  const [\n    { listening, status, pauseAfterDisconnect, interimTranscript, finalTranscript, transcript },\n    dispatch,\n  ] = useReducer(speechRecognitionReducer, initialState);\n\n  const recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : undefined;\n\n  const disconnect = useCallback(\n    (disconnectType: SpeechRecognitionDisconnectType) => {\n      if (recognition) {\n        switch (disconnectType) {\n          case SpeechRecognitionDisconnectType.ABORT:\n            dispatch(setStatus(SpeechRecognitionStatus.ABORTED));\n            dispatch(setPauseAfterDisconnect(true));\n            recognition.abort();\n            break;\n          case SpeechRecognitionDisconnectType.RESET:\n            dispatch(setStatus(SpeechRecognitionStatus.RESET));\n            dispatch(setPauseAfterDisconnect(false));\n            recognition.abort();\n            break;\n          case SpeechRecognitionDisconnectType.STOP:\n          default:\n            dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n            dispatch(setPauseAfterDisconnect(true));\n            recognition.stop();\n        }\n      }\n    },\n    [recognition],\n  );\n\n  const resetTranscript = useCallback(() => {\n    disconnect(SpeechRecognitionDisconnectType.RESET);\n    dispatch(setTranscript(\"\"));\n    dispatch(setInterimTranscript(\"\"));\n    dispatch(setFinalTranscript(\"\"));\n  }, [disconnect]);\n\n  const startListening = useCallback(() => {\n    if (recognition && !listening) {\n      if (!recognition.continuous) {\n        resetTranscript();\n      }\n      try {\n        recognition.start();\n      } catch (DOMException) {\n        // Tried to start recognition after it has already started - safe to swallow this error\n      }\n      dispatch(setStatus(SpeechRecognitionStatus.STARTED));\n      dispatch(setListening(true));\n    }\n  }, [listening, recognition, resetTranscript]);\n\n  const stopListening = useCallback(() => {\n    disconnect(SpeechRecognitionDisconnectType.STOP);\n    dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n    dispatch(setListening(false));\n  }, [disconnect]);\n\n  const abortListening = useCallback(() => {\n    dispatch(setListening(false));\n    disconnect(SpeechRecognitionDisconnectType.ABORT);\n  }, [disconnect]);\n\n  const updateTranscript = useCallback(\n    (event: SpeechRecognitionEvent) => {\n      console.log(\"updating transcript\", event);\n      let interim = \"\";\n      let final = \"\";\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          final = concatTranscripts(final, event.results[i][0].transcript);\n        } else {\n          interim = concatTranscripts(interim, event.results[i][0].transcript);\n        }\n      }\n      dispatch(setTranscript(concatTranscripts(final, interim)));\n      dispatch(setInterimTranscript(interim));\n      dispatch(setFinalTranscript(final));\n\n      if (options.onResult) {\n        options.onResult(final, interim);\n      }\n    },\n    [options],\n  );\n\n  const onRecognitionDisconnect = useCallback(() => {\n    dispatch(setStatus(SpeechRecognitionStatus.STOPPED));\n    if (pauseAfterDisconnect) {\n      dispatch(setListening(false));\n    } else if (recognition) {\n      if (recognition.continuous) {\n        startListening();\n      } else {\n        dispatch(setListening(false));\n      }\n    }\n    dispatch(setPauseAfterDisconnect(false));\n  }, [pauseAfterDisconnect, recognition, startListening]);\n\n  const onRecognitionError = useCallback(({ error, message }) => {\n    console.log(\"Speech recognition error detected: \" + error);\n    console.log(\"Additional information: \" + message);\n  }, []);\n\n  useEffect(() => {\n    if (recognition && !listening) {\n      recognition.continuous = options.continuous !== false;\n      recognition.interimResults = options.interimResults;\n      recognition.onresult = updateTranscript;\n      recognition.onend = onRecognitionDisconnect;\n      recognition.onerror = onRecognitionError;\n    }\n\n    if (recognition && options && options.autoStart) {\n      recognition.start();\n      dispatch(setListening(true));\n    }\n  }, [listening, onRecognitionDisconnect, onRecognitionError, options, recognition, updateTranscript]);\n\n  return {\n    transcript,\n    interimTranscript,\n    finalTranscript,\n    status,\n    listening,\n    recognition,\n    resetTranscript,\n    startListening,\n    stopListening,\n    abortListening,\n  };\n}\n"],"names":["SpeechRecognitionStatus","SpeechRecognitionDisconnectType","createAction","actionCreatorFactory","setTranscript","setStatus","setFinalTranscript","setInterimTranscript","setListening","setPauseAfterDisconnect","initialState","status","READY","transcript","interimTranscript","finalTranscript","listening","pauseAfterDisconnect","speechRecognitionReducer","reducerWithInitialState","state","defaultOptions","autoStart","continuous","interimResults","onResult","onDisconnect","onStart","concatTranscripts","parts","map","t","trim","join","useSpeechRecognition","options","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","useReducer","dispatch","recognition","undefined","disconnect","useCallback","disconnectType","ABORT","ABORTED","abort","RESET","STOP","STOPPED","stop","resetTranscript","startListening","start","DOMException","STARTED","stopListening","abortListening","updateTranscript","event","console","log","interim","final","i","resultIndex","results","length","isFinal","onRecognitionDisconnect","onRecognitionError","error","message","useEffect","onresult","onend","onerror"],"mappings":"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"}